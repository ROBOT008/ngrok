// Code generated by go-bindata.
// sources:
// assets/server/tls/snakeoil.crt
// assets/server/tls/snakeoil.key
// DO NOT EDIT!

// +build release

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsServerTlsSnakeoilCrt = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x93\xbb\xd2\xb2\x48\x10\x40\x73\x9e\x62\x73\x6a\x0b\x04\x54\x08\x87\x19\xae\x32\xe0\x70\x53\x26\xe3\x2e\xa2\xa2\x1f\xc2\x08\x4f\xbf\xfe\x7f\xb0\xc9\xd7\xe1\xe9\xa0\x4f\x55\xd7\xf9\xf7\xcf\xe8\x86\xe5\xf8\xff\x40\x23\x8c\x1d\xd3\x81\x20\x36\xfe\x52\x0e\x3b\x0e\x7c\x21\x08\x01\x05\x10\x12\x74\xc8\x64\x6f\x43\xcf\xf4\x2d\x5c\x81\xaf\xb7\xfd\xeb\xd2\x77\x96\xc6\x44\x1d\x90\xd1\x04\x08\x9c\x70\x48\x98\xd1\x66\x28\x25\x04\x21\xf0\x5e\xb8\x42\x72\xe7\x0a\xb5\x92\xf7\x08\xe7\x12\x81\xda\x64\xe2\x27\x88\x81\x82\x63\xc2\x70\x9c\x28\xf8\x9a\xe6\x5f\xb6\xe2\x15\x88\xf8\xea\xfc\xcf\xb0\x9e\x7d\x4c\x04\x22\x4e\x6f\xfd\x54\x07\x18\x43\xd9\x9d\xb3\xbb\x26\x06\x28\x9b\xaa\xef\xcd\xaf\x99\xee\xfc\xb2\x30\x4c\x00\x02\x08\x88\x0a\xfe\xec\x61\x7b\x80\xdc\x17\x82\x9d\xd4\xef\xac\x72\x08\x8f\x03\xa8\xe8\x83\x07\xee\xf5\x24\xbe\x51\x53\x68\xf3\x25\x7e\xa0\x38\x67\x87\x83\xbc\x5d\x9b\x43\xad\x2f\x8d\x00\xdc\x83\x0b\xbb\xf7\x5d\x95\xe4\xa0\xc3\x02\x17\x7b\x3f\x5b\x64\xf1\x51\x5a\xf1\x11\x48\xab\x72\xe8\x9f\xa5\x97\x05\x29\xa5\x01\xc3\x7b\x07\x9f\xe9\x94\x35\xb5\x7d\x2c\x2b\xbf\x10\x9a\xfe\xde\xcb\x0a\x0a\x55\xd6\xf2\x69\xaf\xb1\xd6\xde\x73\xa0\xe2\x8f\xb8\xdc\x6b\xb4\xcf\xcb\x7b\x6f\x3e\x15\x25\x7e\x8e\xc2\x23\xc0\xd4\xd2\x9e\xc2\x74\x92\x87\x21\x03\x4d\xbd\x07\x23\x9e\x6f\x3f\x02\x8c\x85\xbd\x14\xf6\xf4\xa7\x2c\x25\x6a\x4e\xa1\xc9\x79\x17\x8f\xbf\x4f\xb7\xdd\xf2\xd9\x64\xc9\x65\x24\x2d\x7b\x41\x6d\x57\xa5\x4d\xac\xd2\xcd\x6a\xbf\xd2\xc5\x76\xfb\x5d\x16\xb9\x5e\x54\xcf\x2f\xaa\xbb\xa4\x3d\x9e\xfa\x00\x5c\xec\x17\x02\x0c\x7e\xb8\xf2\x98\x5b\x67\x56\x37\xd8\x29\x45\x2f\x1d\x53\x57\x51\xb7\xa4\x19\xdf\xd9\xf5\xd9\x66\xeb\xe7\x48\x87\x25\x80\x9b\x47\x4b\xd2\x5c\xad\x22\xa3\xf0\xa9\x89\x47\xb7\x66\xfc\xae\xd8\x25\xe7\x1c\x71\xda\x62\xc5\x37\x91\xfc\xac\xb3\x53\x32\xdb\x78\x58\xa2\x51\x28\x0d\xa9\x31\x71\x10\x20\x40\xc7\x40\xb4\x60\xf4\xb2\x22\xa7\x90\x11\x31\x74\xc8\x12\x00\x14\xe7\xfb\x11\x78\xaf\x72\x1f\x70\x44\x91\xd7\xe8\x92\x29\x99\x3a\xe3\xec\xab\x6c\xe7\x7e\x3b\xab\x8b\x4e\xa4\xd7\x69\x52\x1b\x65\x09\x87\xc9\x23\xa2\x7a\x41\xfe\xf8\x38\x52\x2f\x91\xae\x61\x06\x85\xb5\xa8\x43\xac\xf9\x3b\x91\xdb\xd8\xfa\xd5\xe3\x23\x35\xd5\x25\xf3\x3c\xe5\x32\x62\xde\x5e\x1d\x6e\x21\xd0\xdf\x83\xb6\x08\x5d\x32\xdd\x2e\x4c\x4a\x1b\xe3\xfa\x5c\x16\x46\x8b\x7b\xc5\xcc\xcd\x24\x6a\xbc\xd2\x2f\xa8\x40\x88\x4b\xb4\x56\xec\x12\x21\x71\x58\x96\xdb\x9b\x50\xdc\xfb\xb1\x3f\x7e\x9c\x0c\x2a\xad\x5f\xd3\xc3\xd6\x33\x9d\xe4\xdc\xc4\x8a\x22\xa2\x16\x6f\x6f\xb7\xed\x72\x70\xdc\x3d\xbb\x19\xbb\x53\x77\xb9\x99\x25\xa7\x1d\xb7\x75\xf8\xde\x2f\x7e\x72\x58\x4e\xdd\x70\xe4\x6b\x93\x76\xe3\x40\xbc\x4a\x01\x56\x26\x87\xa3\x1a\x3d\x73\xb3\x31\xd5\x4d\xd0\xad\xb9\x85\x0b\x5f\xc2\x9f\x65\x19\x45\xa9\x0b\x53\x2d\xe2\xb9\xb3\xa7\x39\x93\x11\x34\x86\xe0\x33\xd2\x12\x39\xa2\xf9\xe9\x3e\x2e\x46\x9d\xce\x06\x10\x92\x26\x15\xaf\x9d\x15\x7b\xe5\xa7\x1e\x4e\xd5\xd6\x36\x66\xe6\x15\x8c\x87\xc9\x74\x3d\x0e\x96\xdc\xd9\xdc\x0b\x3e\x3d\xdd\x19\xe7\x5e\x5a\x75\xbf\x1c\x09\xf7\x37\x52\xc3\x47\xbf\xc3\xfd\x2f\x00\x00\xff\xff\xfa\x84\x8e\x23\xd5\x03\x00\x00"

func assetsServerTlsSnakeoilCrtBytes() ([]byte, error) {
	return bindataRead(
		_assetsServerTlsSnakeoilCrt,
		"assets/server/tls/snakeoil.crt",
	)
}

func assetsServerTlsSnakeoilCrt() (*asset, error) {
	bytes, err := assetsServerTlsSnakeoilCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/server/tls/snakeoil.crt", size: 981, mode: os.FileMode(420), modTime: time.Unix(1565747910, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsServerTlsSnakeoilKey = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x95\xb7\x12\xab\x5a\x12\x45\x73\xbe\xe2\xe5\xd4\x14\x08\x23\x20\x98\xe0\x60\x84\x17\x20\xe0\x20\xc8\xb0\x47\x78\x2b\x10\x7c\xfd\xdc\x77\xe3\xe9\xb0\xbb\xaa\x6b\xaf\x9d\xac\xff\xfc\x3b\xa2\xa2\xea\xcf\x7f\x5e\x3e\xf8\xc7\x7d\xe9\x10\x04\xca\x3f\xa6\x12\xff\xbd\x60\xb6\xae\x2b\x23\xd2\x45\x00\x4c\x09\x78\x0a\xb8\x53\xed\x5d\xcd\xc7\x97\x3b\x82\x22\x19\x70\x60\x34\x11\xb9\xc9\x55\x26\xec\x9f\x60\x90\x83\xf4\x30\x4d\x9a\xbd\x2a\xb3\x14\xcf\x8a\x00\x86\x89\x19\x52\xbd\xf5\x3c\x45\x3b\xb5\x4d\x04\xd6\xc2\xca\x2a\xee\xc3\x02\xf7\x01\x2c\xf2\xb1\x9d\x72\x2b\x76\x60\x92\x38\x87\xcd\xe9\xf6\x3b\xf9\xc6\x55\xa9\xb9\x79\xf1\xcc\x88\xaa\xed\x5b\x9a\x91\xb1\x17\x7f\x20\x1c\xb6\xc2\x81\x34\x0e\x14\xb8\x6b\xe7\x9c\x90\xb4\x69\xde\xb7\x8f\x89\x61\x82\x69\x25\x06\xc7\x4e\x54\x61\x22\xbe\x11\x3d\x8e\x31\xa8\x4a\x0e\xac\xf6\xde\x2d\x84\x14\x10\x1c\x85\xbd\xda\x64\xc9\x73\x2a\x79\x7c\x5f\x0f\xeb\x63\xe1\xfd\xb7\xbb\x9f\xbf\x5b\x1c\x7e\x56\x0f\x1d\xb3\x24\xdc\x0b\x58\x05\x7c\x72\xbb\xb4\x19\x9e\x9a\xd1\xde\x63\xdf\xb0\xfc\x72\x9f\x13\xd1\xf0\x90\x8b\x45\xad\x03\x3e\xda\x2c\x83\x43\xfa\xe5\x6e\xaa\xbe\x8f\xb2\xb2\xf5\x9c\xb4\xe0\x0a\x0d\x86\x67\xbd\x6a\xdd\xe2\x66\x42\xf1\xf5\x73\x93\xf1\x74\xa4\xdb\x80\x3c\x98\xf2\x85\xaf\x64\xcf\xe4\x61\x63\xab\x51\x1e\xf8\x3d\xbb\x87\xef\x54\x16\x4e\x35\xe8\x48\x6f\xb9\x76\x3d\x3f\x34\x65\x50\x49\x25\x63\x2a\xaf\xb4\x3d\x5d\x06\x1e\x10\xc1\xf8\xa7\x6c\xb1\xa9\x04\xa3\xa6\xc5\xee\xf6\x0b\xeb\x81\xc3\x2a\x4f\xb7\x7b\xeb\x8c\x82\xc1\x9a\x7c\xfd\xb5\x13\xf0\xb1\x8f\x72\x9b\x24\xbf\xd4\x16\xf9\x72\xf5\xda\xe7\x8b\xf6\xd8\xba\x89\xac\xda\x37\x42\x55\xb2\xae\x75\xf6\xaf\xe0\xc0\x2f\x33\xa2\x26\x0a\x9b\x8f\xc6\x33\xee\xa0\x53\x09\xd1\x2c\x0e\xc6\x50\x09\x6b\xf2\x7a\x41\x1b\xcf\xca\x17\x9d\x04\x67\x02\x22\xe3\xdc\xc3\x7e\xec\xb8\xa4\x88\xf2\xa7\x67\xad\xf9\x84\x5a\x19\x36\x7b\x5f\xb1\x59\x85\xe1\xcc\xbb\x10\x26\x89\x0f\xe7\x55\x4d\xd2\x9e\xb7\x79\x9e\x4d\x7f\xaf\x72\x8a\xf1\x45\x4b\xab\x44\xec\xe0\x89\xca\x7c\x8c\xf3\xfb\x39\xff\x02\xd6\x70\x4a\x5e\x3c\x78\xcd\xcc\x6b\xd9\x10\xd1\x0b\x2b\x5f\xef\x7e\xdc\x2c\x04\x50\x8f\xe0\x7c\x5e\xec\x28\x4a\x89\x1b\x8f\x33\x9b\xdb\x3e\xb9\x6b\x73\x33\x24\xc1\x2e\x59\xb9\xfd\x25\x04\x94\xf8\xaf\x99\xa5\x3a\xf1\x63\xa9\xf6\xf9\x71\xeb\xf4\x8d\xd1\xc5\x61\xbf\x74\xb5\xa8\xc1\x21\x0e\xc1\xa0\x0c\xf3\xd0\x9c\xf9\xea\x56\x5c\xe0\x9c\x36\x7a\xaa\x5f\x44\x8c\x1d\x81\x57\x85\x9b\xa2\x85\x10\xb3\x65\x18\x7d\x8a\xb7\xbc\xb6\xad\xe4\xf6\xd7\x60\xf9\xa0\x64\x1e\xa9\x48\x28\x56\x00\x91\x3c\x64\x02\xb9\xf4\x53\x5f\xa4\x36\x50\x36\xe9\xba\xf4\x9e\x9a\xf1\xb3\xde\xbe\xd2\xad\x0f\xec\x4e\xbb\xd3\x3e\x03\xdf\x4c\xe5\xd7\x34\x20\xa7\xb7\xf0\xc6\x64\x21\x2a\xc7\xdb\x70\x56\xe7\x57\xb5\xff\x50\x77\x28\xfe\x3e\xfe\x70\xf9\x11\x78\xcc\x3c\xbe\xa4\xdb\x59\x4e\x47\xbb\x7c\xb6\xc4\xdb\xe8\xe6\x4d\x84\x90\xf2\x3d\xa7\xd7\x7e\x2f\xa9\x60\xaf\x0e\x1b\xf5\x8e\x27\x57\x6e\xff\x8a\x0f\xe8\x9e\x36\x71\x52\x29\x8a\xf9\xf9\xa2\xb7\xc3\x73\xce\x07\x29\xe4\x67\xfa\x35\xc8\xf9\x96\x0e\x95\xe4\x4c\x8b\x41\x5f\x54\xd6\xb4\x7f\x13\x73\xe9\x56\x61\x62\x77\x31\x92\xdc\x87\xbb\xa6\xc2\xe0\x41\xc5\xb7\xf6\x2d\x69\x85\x85\x92\x31\x17\x87\xc2\x72\xa3\x9d\x04\x2d\x9e\xf5\x1c\x78\xe1\x45\x22\xe9\x3f\x63\x89\x08\x32\x77\x50\xb9\xee\xd3\x93\xb9\xb0\xa7\xe4\x2f\x77\x32\x6f\xeb\xdf\x5a\xfb\x8d\x06\xe0\x53\x85\x1b\xe5\x5d\x0f\x98\xd1\x52\x2b\xf1\x43\x14\x7f\xb2\x42\x1d\x21\xd9\x68\xc6\xd7\xf0\xe6\x39\x25\x95\xa0\xfd\x80\x5e\xcb\xd4\x9d\xf7\x30\x00\x7a\xc8\x12\xcf\xe3\x4a\x67\x8b\xe2\x8c\xe2\xf1\x1c\xe8\x27\x43\x0d\x19\x47\x3e\x28\x4f\x0f\xaf\xd6\x3c\x2d\xee\xdf\xc8\x40\x46\xaa\xad\xe3\x95\x6d\x0a\x99\x13\x6a\x9c\xc9\xd4\xe8\xf1\xc6\x2c\x31\x3c\x62\xc6\x6e\xd1\xbe\xf6\x71\x76\xfb\xaa\xc3\xe0\x3e\x1c\xe4\x27\xdb\x4d\x76\xf9\x7d\xc6\x0f\xfe\x3c\x94\x98\x25\x60\x86\x94\x2e\x5d\x92\x4c\xbc\x9c\x5d\x16\xc6\x28\xf3\xa7\x3f\x6b\x2c\x6b\x13\xbc\x43\x72\x48\x6f\x99\x82\x8a\xe8\xf7\x35\x9b\xa8\x22\x8b\x9e\xd0\xca\x1a\x05\x79\xdf\x40\x81\x67\x73\x69\x58\x3d\x0a\x06\x13\xfb\x64\x39\xa2\xf3\x1c\x23\x24\x74\x8b\xa1\x3f\xe2\x88\xa5\x7a\xd5\x67\x0b\xb9\xad\x52\x05\x83\x59\xe8\xb5\xcb\x6c\x70\xcf\x14\x91\x34\x08\xbb\x0c\xf5\x3e\x63\xa4\x57\x8f\x10\x11\x2e\xef\x63\x42\x1f\xf9\xa5\x6d\xf4\x8f\x2e\xdd\xb1\x2a\xd9\x7a\xa8\xb1\x17\x93\xa5\x46\xe5\xbb\xce\xe2\x87\x27\x0f\xf5\xa3\x51\x67\x3d\xb4\x9f\x62\x9c\x1d\x1f\x12\x1e\x76\xb0\x1b\xd5\xf1\x41\x27\x9e\x77\xbc\x2f\x5a\xde\xed\x79\x6f\x92\x8a\x19\x34\x1e\xb9\xbb\xd5\xfe\x79\x10\xdd\x27\x89\x25\xbe\x2d\x12\x8b\x2e\x44\x81\xab\xdf\x15\x8b\xa6\xc0\x67\xe5\xf8\xdb\x89\xc3\xa7\x2c\x64\xbb\x4a\x67\xe7\x6f\x26\xc1\xcd\x51\x22\x73\x0d\xa3\x6a\x6a\x67\x7a\x59\xaf\x22\xc5\xa4\x5b\x31\x81\x51\x05\x89\xfb\x56\xa2\x41\xbb\xb6\xe5\x82\xcd\xe6\x72\x90\x31\xde\x12\x6b\xbe\x53\x04\x2d\xfe\xb6\x5a\xc9\xc6\x65\xdf\xad\x0d\xfa\x80\xbe\x87\x1d\x63\x3a\xc0\xfa\x5a\x1b\x7f\x60\x64\xa7\x27\xf2\xa7\xa6\x2d\x4a\x8b\xe3\xed\xad\x6e\x22\xf4\x0c\x8b\x9b\xa5\x8b\x81\x9a\x79\x4c\x5c\x9a\x5d\x47\x0e\x1e\xb6\x40\xfa\x56\x49\x31\x4f\xcb\xb4\xfb\x5c\x98\x0d\xd6\x47\x55\x47\x00\x2c\xa6\xf5\x51\xd8\x93\x7e\xb0\x7d\x48\xaa\x3e\xa7\xcb\x78\xcd\x0f\xb6\x34\x78\xb2\x46\xeb\x67\xc0\xd6\xca\x72\x64\xa0\xa4\x59\x5c\x6e\xac\x21\xe5\x4d\xf4\x5f\xec\xaf\x52\x94\xa7\xfc\xff\x55\xf3\xbf\x00\x00\x00\xff\xff\x59\x5e\x60\x1c\x8b\x06\x00\x00"

func assetsServerTlsSnakeoilKeyBytes() ([]byte, error) {
	return bindataRead(
		_assetsServerTlsSnakeoilKey,
		"assets/server/tls/snakeoil.key",
	)
}

func assetsServerTlsSnakeoilKey() (*asset, error) {
	bytes, err := assetsServerTlsSnakeoilKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/server/tls/snakeoil.key", size: 1675, mode: os.FileMode(420), modTime: time.Unix(1565747911, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/server/tls/snakeoil.crt": assetsServerTlsSnakeoilCrt,
	"assets/server/tls/snakeoil.key": assetsServerTlsSnakeoilKey,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"server": &bintree{nil, map[string]*bintree{
			"tls": &bintree{nil, map[string]*bintree{
				"snakeoil.crt": &bintree{assetsServerTlsSnakeoilCrt, map[string]*bintree{}},
				"snakeoil.key": &bintree{assetsServerTlsSnakeoilKey, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

